"""
记录器（Logger）：提供应用程序代码直接使用的接口。
处理器（Handler）：将日志记录（由记录器创建）发送到适当的目的地。
筛选器（Filter）：提供了更细粒度的功能，用于确定要输出的日志记录。
格式器（Formatter）：程序在最终输出日志记录的内容格式

basicConfig()
    filename  日志输出到文件的文件名
    filemode  文件模式，r[+]、w[+]、a[+]
    format  日志输出的格式
    datefat  日志附带日期时间的格式
    style  格式占位符，默认为 "%" 和 “{}”
    level  设置日志输出级别
    stream  定义输出流，用来初始化 StreamHandler 对象，不能 filename 参数一起使用，否则会ValueError 异常
    handles  定义处理器，用来创建 Handler 对象，不能和 filename 、stream 参数一起使用，否则也会抛出 ValueError 异常

Logger 对象可以设置多个 Handler 对象和 Filter 对象，Handler 对象又可以设置 Formatter 对象
    asctime  %(asctime)s  将日志的时间构造成可读的形式，默认情况下是精确到毫秒，如 2018-10-13 23:24:57,832，可以额外指定 datefmt 参数来指定该变量的格式
    name  %(name)s  日志对象的名称
    filename  %(filename)s  不包含路径的文件名
    pathname  %(pathname)s  包含路径的文件名
    funcName  %(funcName)s  日志记录所在的函数名
    levelname  %(levelname)s  日志的级别名称
    message  %(message)s  具体的日志信息
    lineno  %(lineno)d  日志记录所在的行号

常用方法
    logger.setLevel()
    logger.addHandler()
    logger.removeHandler()
    logger.addFilter()
    logger.removeFilter()

    handler.setLevel()
    handler.setFormatter()
    handler.addFilter()
    handler.removeFilter()

"""

import logging


# 基本使用
# logging.basicConfig()
# logging.debug('This is a debug message')
# logging.info('This is an info message')
# logging.warning('This is a warning message')
# logging.error('This is an error message')
# logging.critical('This is a critical message')

# 输出到文件
# logging.basicConfig(filename="test.log",
#                     filemode="w",
#                     format="%(asctime)s %(name)s:%(levelname)s:%(message)s",
#                     datefmt="%d-%m-%Y %H:%M:%S",
#                     level=logging.DEBUG)
# logging.debug('This is a debug message')
# logging.info('This is an info message')
# logging.warning('This is a warning message')
# logging.error('This is an error message')
# logging.critical('This is a critical message')

# 自定义logger
# logger = logging.getLogger("logger")
#
# handler1 = logging.StreamHandler()
# handler2 = logging.FileHandler(filename="test.log")
#
# logger.setLevel(logging.DEBUG)
# handler1.setLevel(logging.WARNING)
# handler2.setLevel(logging.DEBUG)
#
# formatter = logging.Formatter("%(asctime)s %(name)s %(levelname)s %(message)s")
# handler1.setFormatter(formatter)
# handler2.setFormatter(formatter)
#
# logger.addHandler(handler1)
# logger.addHandler(handler2)
#
# logger.debug('This is a customer debug message')
# logger.info('This is an customer info message')
# logger.warning('This is a customer warning message')
# logger.error('This is an customer error message')
# logger.critical('This is a customer critical message')

# 中文乱码
# handler = logging.FileHandler(filename="test.log", encoding="utf-8")
#
# logging.basicConfig(handlers=[logging.FileHandler("test.log", encoding="utf-8")], level=logging.DEBUG)

# 创建日志器
# 若没有指定日志器名称，则默认为root  print(logging.getLogger())
# logger = logging.getLogger()
# 当有多个具有相同名称的日志器，调用任一日志器时将返回对同一记录器对象的引用,处理器handler是相互叠加，由于logging每次输出日志记录数量=handler数量，我们会看到logger.warning("输出一条日志记录")的实际结果会打印多条日志记录
# 通常建议使用__name__来命名日志器，或者自定义的名称，这样日志器名称不相同，则不会产生handler叠加的现象

# exc_info： 其值为布尔值，如果该参数的值设置为True，则会将异常异常信息添加到日志消息中。如果没有异常信息则添加None到日志信息中





